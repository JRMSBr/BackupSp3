[gcode_macro F_CONSUMED]
variable_filament_consumed: 0
variable_filament_lenght: 620   # length between the sensor and extruder
gcode:
    {% if printer.idle_timeout.state == "Printing" %}
      M117 FILAMENT RUNOUT
    {% endif %}
 # save current filament consumption
 SET_GCODE_VARIABLE MACRO=F_CONSUMED VARIABLE=filament_consumed VALUE={printer.print_stats.filament_used}
 # start checking filament consumption
 UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1
 #M117 Filament Runout Active

[delayed_gcode DELAY_M600]
gcode:
 # use set for easier reading
 {% set consumed=printer["gcode_macro F_CONSUMED"].filament_consumed %}
  {% set length=printer["gcode_macro F_CONSUMED"].filament_lenght %}
  # check if predetermine length is reached
   {% if printer.print_stats.filament_used|float <= (consumed|float + length|float) %}
   # start looping this script every second
   UPDATE_DELAYED_GCODE ID=DELAY_M600 DURATION=1
 {% else %}
  SET_IDLE_TIMEOUT [TIMEOUT=36000]
  PAUSE          #M600
 {% endif %}


#    Alterar esses parametros no [filament_switch_sensor]
#    
#    pause_on_runout:           False
#    runout_gcode:              F_CONSUMED
#    event_delay:               3.0









 

############# teste 2 caso o 1 nao funcionar... mas funcionou kkkkk, vou manter por seguranÃ§a #############

# [gcode_macro PAUSE_AFTER_D]
# description: Trigger to pause the print after a further 'd' mm has been extruded
# variable_end_d: 600 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
# gcode:
#   {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
#   {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
#   SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
#   M117 Pause at {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
#   UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second
# 
# [delayed_gcode PAUSE_AT_D]
# initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
# gcode:
#   {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
#   {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
#     M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
#     UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
#   {% else %}
#     PAUSE
#     UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
#   {% endif %}